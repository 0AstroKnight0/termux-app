name: Build

on:
  push:
    branches:
      - master
      - 'github-releases/**'
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package_variant: [apt-android-7, apt-android-5]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build APKs
        shell: bash {0}
        env:
          PACKAGE_VARIANT: ${{ matrix.package_variant }}
        run: |
          set -euo pipefail
          echo "Initializing build for variant: ${PACKAGE_VARIANT}"
          
          # Use the PR's head commit for pull requests
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
              GITHUB_SHA="${{ github.event.pull_request.head.sha }}"
          fi

          # Extract current version from build.gradle and create a semantic version tag
          CURRENT_VERSION_NAME=$(grep -m1 -E 'versionName\s+"([^"]+)"' ./app/build.gradle | sed -r 's/.*"([^"]+)".*/\1/')
          RELEASE_VERSION_NAME="v${CURRENT_VERSION_NAME}+${GITHUB_SHA:0:7}"
          if ! echo "${RELEASE_VERSION_NAME/v/}" | grep -qP '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-[0-9A-Za-z.-]+)?(?:\+[0-9A-Za-z.-]+)?$'; then
            echo "Invalid version format: ${RELEASE_VERSION_NAME/v/}"
            exit 1
          fi

          APK_DIR="./app/build/outputs/apk/debug"
          APK_TAG="${RELEASE_VERSION_NAME}-${PACKAGE_VARIANT}-github-debug"
          APK_PREFIX="termux-app_${APK_TAG}"

          # Save key variables for downstream steps
          echo "APK_DIR=$APK_DIR" >> $GITHUB_ENV
          echo "APK_TAG=$APK_TAG" >> $GITHUB_ENV
          echo "APK_PREFIX=$APK_PREFIX" >> $GITHUB_ENV

          # Export variables for gradle build configuration
          export TERMUX_APP_VERSION_NAME="${RELEASE_VERSION_NAME/v/}"
          export TERMUX_APK_VERSION_TAG="${APK_TAG}"
          export TERMUX_PACKAGE_VARIANT="${PACKAGE_VARIANT}"

          echo "Starting Gradle build for variant ${PACKAGE_VARIANT}"
          ./gradlew assembleDebug

          echo "Verifying built APKs..."
          for abi in universal arm64-v8a armeabi-v7a x86_64 x86; do
            apk_file="${APK_DIR}/${APK_PREFIX}_${abi}.apk"
            if [ ! -f "$apk_file" ]; then
              echo "Missing APK for ABI $abi. Found files:" 
              ls "$APK_DIR"
              exit 1
            fi
          done

          echo "Generating sha256sums..."
          (cd "$APK_DIR" && sha256sum \
            ${APK_PREFIX}_universal.apk \
            ${APK_PREFIX}_arm64-v8a.apk \
            ${APK_PREFIX}_armeabi-v7a.apk \
            ${APK_PREFIX}_x86_64.apk \
            ${APK_PREFIX}_x86.apk > ${APK_PREFIX}_sha256sums)
          
      - name: Archive Artifacts
        run: |
          mkdir -p artifacts
          cp -v ${{ env.APK_DIR }}/${{ env.APK_PREFIX }}_* artifacts/
          cp -v ${{ env.APK_DIR }}/output-metadata.json artifacts/
          cd artifacts
          tar -czf termux_apks_${{ env.APK_TAG }}.tar.gz *
          mv termux_apks_${{ env.APK_TAG }}.tar.gz ../
      
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: termux_apks_${{ env.APK_TAG }}
          path: termux_apks_${{ env.APK_TAG }}.tar.gz
